name: NHL Data Pipeline

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare outputs dir
        run: |
          mkdir -p outputs
          echo "Starting NHL pipeline chain..."

      # -------------------------
      # CONNECTIVITY DIAGNOSTICS
      # -------------------------
      - name: Connectivity check (DNS + HTTP)
        shell: bash
        run: |
          set -x
          echo "DNS check:"
          getent hosts statsapi.web.nhl.com || echo "DNS fail: statsapi.web.nhl.com"
          getent hosts api-web.nhle.com || echo "DNS fail: api-web.nhle.com"

          echo "HTTP HEAD (statsapi) status:"
          curl -I -sS --max-time 12 https://statsapi.web.nhl.com/api/v1/teams | head -n 1 || echo "HTTP fail statsapi"

          echo "HTTP sample (nhle alt) bytes for BOS/current:"
          curl -sS --max-time 12 https://api-web.nhle.com/v1/roster/BOS/current | wc -c || echo "HTTP fail nhle (BOS/current)"

      # -------------------------
      # SCRAPERS (best-effort)
      # -------------------------
      - name: Scrape team stats
        run: |
          echo "Running scripts/scrape_team.py"
          python -u scripts/scrape_team.py || echo "[warn] scrape_team.py failed (continuing)"
          echo "--- team_stats.csv summary ---"
          if [ -f outputs/team_stats.csv ]; then
            wc -l outputs/team_stats.csv || true
            head -n 10 outputs/team_stats.csv || true
          else
            echo "outputs/team_stats.csv not found"
          fi

      - name: Scrape players (rosters)
        run: |
          echo "Running scripts/scrape_players.py"
          python -u scripts/scrape_players.py || echo "[warn] scrape_players.py failed (continuing)"
          echo "--- players.csv summary ---"
          if [ -f outputs/players.csv ]; then
            wc -l outputs/players.csv || true
            head -n 10 outputs/players.csv || true
          else
            echo "outputs/players.csv not found"
          fi

      - name: Scrape player stats
        run: |
          echo "Running scripts/scrape_stats.py"
          python -u scripts/scrape_stats.py || echo "[warn] scrape_stats.py failed (continuing)"
          echo "--- player_stats.csv summary ---"
          if [ -f outputs/player_stats.csv ]; then
            wc -l outputs/player_stats.csv || true
            head -n 10 outputs/player_stats.csv || true
          else
            echo "outputs/player_stats.csv not found"
          fi

      - name: Fetch odds
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          echo "Running scripts/fetch_odds.py"
          python -u scripts/fetch_odds.py || echo "[warn] fetch_odds.py failed (continuing)"

      - name: Scrape injury/news
        env:
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        run: |
          echo "Running scripts/scrape_news.py"
          python -u scripts/scrape_news.py || echo "[warn] scrape_news.py failed (continuing)"

      # -------------------------
      # REFRESH REFERENCE DATA
      # -------------------------
      - name: Refresh rink data
        run: |
          echo "Running scripts/refresh_rinks.py"
          python -u scripts/refresh_rinks.py || echo "[warn] refresh_rinks.py failed (continuing)"

      - name: Refresh goalie data
        run: |
          echo "Running scripts/refresh_goalies.py"
          python -u scripts/refresh_goalies.py || echo "[warn] refresh_goalies.py failed (continuing)"

      - name: Refresh injury data
        run: |
          echo "Running scripts/refresh_injuries.py"
          python -u scripts/refresh_injuries.py || echo "[warn] refresh_injuries.py failed (continuing)"

      # -------------------------
      # PROCESSING
      # -------------------------
      - name: Build projections
        run: |
          echo "Running scripts/projections.py"
          python -u scripts/projections.py || echo "[warn] projections.py failed (continuing)"

      - name: Process modeling outputs
        run: |
          echo "Running scripts/process_data.py"
          python -u scripts/process_data.py || echo "[warn] process_data.py failed (continuing)"

      - name: Repo summary (CSV inventory)
        run: |
          echo "Running scripts/process_nhl.py"
          python -u scripts/process_nhl.py || echo "[warn] process_nhl.py failed (continuing)"

      # -------------------------
      # OPTIONAL ORCHESTRATOR
      # -------------------------
      - name: Run main orchestrator
        run: |
          if [ -f "main.py" ]; then
            echo "Running main.py"
            python -u main.py || echo "[warn] main.py failed (continuing)"
          else
            echo "main.py not found, skipping"
          fi

      # -------------------------
      # COLLECT OUTPUTS (no-clobber projections)
      # -------------------------
      - name: Collect CSV outputs
        shell: bash
        run: |
          echo "Collecting CSVs into outputs/ (without clobbering outputs/projections.csv)"
          mkdir -p outputs

          shopt -s nullglob
          for f in ./*.csv; do
            base="$(basename "$f")"
            if [[ "$base" == "projections.csv" ]]; then
              if [[ ! -f outputs/projections.csv ]]; then
                cp -f "$f" "outputs/$base"
              fi
            else
              cp -f "$f" "outputs/$base"
            fi
          done

          if [[ -d "data" ]]; then
            while IFS= read -r -d '' f; do
              base="$(basename "$f")"
              if [[ "$base" == "projections.csv" ]]; then
                if [[ ! -f outputs/projections.csv ]]; then
                  cp -f "$f" "outputs/$base"
                fi
              else
                cp -f "$f" "outputs/$base"
              fi
            done < <(find data -type f -name "*.csv" -print0)
          fi

          date -u +"%Y-%m-%dT%H:%M:%SZ" > outputs/_run_heartbeat.txt
          echo "Outputs listing:"
          ls -la outputs || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nhl-outputs
          path: |
            outputs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Commit outputs
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A outputs || true
          git add *.csv || true
          if git diff --cached --quiet; then
            echo "Nothing to commit"
          else
            git commit -m "CI: update outputs [skip ci]"
            git push origin HEAD:${{ github.ref_name }}
          fi
